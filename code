;variant 10
format PE console

entry start

include 'win32a.inc'

section '.data' data readable writable
        strN db 'Enter array lenght from 1 to 100: ', 0
        strNext db '[%d]? ', 0

        strArr db 'Input Array', 0
        strRarr db 10, 13,'Output Array', 0

        resStr db 'Result: [%d] = ', 0
        emptyRes db 10, 13, '[%d] = ', 0
        emptyResStr db '%d', 0

        spaceStr db ' %d', 0
        emptyStr db '%d', 0

        arr rd 101
        rarr rd 101
        N dd ?
        i dd ?

        Null = 0

section '.code' code readable executable
        start:
                push strN
                call [printf]

                push N
                push emptyStr
                call [scanf]

                jmp inputArray
                continue1:


                mov ebx, 0
                mov edx, [N]
                sub edx, 1
                lprev:
                        mov ecx, [arr + ebx * 4]
                        mov [rarr + edx * 4], ecx

                        add ebx, 1
                        sub edx, 1
                        cmp ebx, [N]
                jne lprev

                jmp outputFirstArray
                continue2:

                jmp outputSecondArray
                continue3:

                call [getch]

                push Null
                call [ExitProcess]

;==============================
inputArray:
                mov ebx, 0
                lp:
                        push ebx
                        push strNext
                        call [printf]

                        push i
                        push spaceStr
                        call [scanf]

                        mov ecx, [i]
                        mov [arr + ebx * 4], ecx

                        add ebx, 1
                        cmp ebx, [N]
                jne lp
                jmp continue1

;===============================
outputFirstArray:
                push strArr
                call [printf]

                mov ebx, 0
                mov edx, [N]
                sub edx, 1
                lp1:

                        push ebx
                        push emptyRes
                        call [printf]

                        mov ecx, [arr + ebx * 4]
                        push ecx
                        push emptyResStr
                        call [printf]

                        add ebx, 1
                        sub edx, 1
                        cmp ebx, [N]
                jne lp1
                jmp continue2

;================================
outputSecondArray:
                push strRarr
                call [printf]
                mov ebx, 0
                lp2:
                        push ebx
                        push emptyRes
                        call [printf]

                        push [rarr + ebx * 4]
                        push emptyResStr
                        call [printf]

                        add ebx, 1
                        cmp ebx, [N]
                jne lp2
                jmp continue3


section '.idata' import data readable
        library kernel, 'kernel32.dll',\
                msvcrt, 'msvcrt.dll'

        import kernel, \
               ExitProcess, 'ExitProcess'

        import msvcrt,\
               printf, 'printf',\
               scanf, 'scanf',\
               getch, '_getch'
